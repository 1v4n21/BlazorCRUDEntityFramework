<!-- Ruta de la vista actual -->
@page "/h"

<!-- Utilizar DOM en Blazor -->
@rendermode InteractiveServer

<!-- Injectamos las clases con un nombre apuntando a ellas -->
@inject IBookService BookService

<!-- Para redirigir a rutas -->
@inject NavigationManager NavigationManager

<!-- Titulo de la vista -->
<PageTitle>BookListGrid</PageTitle>

<!-- h1 de la vista -->
<h1>BookListGrid</h1>

<!-- Descripción de la web -->
<p>This page shows a list of all books.</p>
<!-- Mensaje de error en el caso de lanzar excepcion -->
@Message

<!-- Enlace para añadir libro -->
<div>
	<a href="/bookDetails"><i>Add New Book</i></a>
</div>

<!-- Comprobamos que ha cargado los libros -->
@if (books == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<!-- Tabla con los libros y sus datos -->
	<DxGrid Data="@books">
		<Columns>
			<DxGridDataColumn FieldName="BookId"/>
			<DxGridDataColumn FieldName="Title" />
			<DxGridDataColumn FieldName="Author" Width="120px" />
		</Columns>  
	</DxGrid>
}

@code {
	//Array de todos los libros existentes en la BD
	public IEnumerable<Book> books { get; set; }

	public string Message { get; set; }

	public Book book { get; set; }

	//Metodo que se ejecuta al iniciar la web
	protected override async Task OnInitializedAsync()
	{
		await RefreshBook();
	}

	//Borrar libro por su id
	protected async Task DeleteBook(int id)
	{
		await BookService.DeleteBook(id);

		//Volvemos a cargar todos los datos tras eliminar el libro
		await RefreshBook();
	}

	//Metodo para cargar los libros
	protected async Task RefreshBook()
	{
		try
		{
			//Metodo que carga todos los datos de la BD
			books = await BookService.GetAllBook();
		}
		catch (Exception e)
		{
			//Mensaje de error excepcion
			Message = e.Message;
		}
	}
}
